//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class FacadeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Facade), typeof(System.Object));
		L.RegFunction("RegisterCommand", RegisterCommand);
		L.RegFunction("RemoveCommand", RemoveCommand);
		L.RegFunction("HasCommand", HasCommand);
		L.RegFunction("RegisterMultiCommand", RegisterMultiCommand);
		L.RegFunction("RemoveMultiCommand", RemoveMultiCommand);
		L.RegFunction("SendMessageCommand", SendMessageCommand);
		L.RegFunction("AddManager", AddManager);
		L.RegFunction("RemoveManager", RemoveManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterCommand(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Facade obj = (Facade)ToLua.CheckObject(L, 1, typeof(Facade));
			string arg0 = ToLua.CheckString(L, 2);
			System.Type arg1 = (System.Type)ToLua.CheckObject(L, 3, typeof(System.Type));
			obj.RegisterCommand(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveCommand(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Facade obj = (Facade)ToLua.CheckObject(L, 1, typeof(Facade));
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveCommand(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasCommand(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Facade obj = (Facade)ToLua.CheckObject(L, 1, typeof(Facade));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasCommand(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterMultiCommand(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			Facade obj = (Facade)ToLua.CheckObject(L, 1, typeof(Facade));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			string[] arg1 = ToLua.CheckParamsString(L, 3, count - 2);
			obj.RegisterMultiCommand(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveMultiCommand(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			Facade obj = (Facade)ToLua.CheckObject(L, 1, typeof(Facade));
			string[] arg0 = ToLua.CheckParamsString(L, 2, count - 1);
			obj.RemoveMultiCommand(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMessageCommand(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Facade obj = (Facade)ToLua.CheckObject(L, 1, typeof(Facade));
			string arg0 = ToLua.CheckString(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.SendMessageCommand(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddManager(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Facade obj = (Facade)ToLua.CheckObject(L, 1, typeof(Facade));
			string arg0 = ToLua.CheckString(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.AddManager(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveManager(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Facade obj = (Facade)ToLua.CheckObject(L, 1, typeof(Facade));
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveManager(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

